#include "stdafx.h"

#define WIDTH	960
#define HEIGHT	540

COpenGLWinApp appMain;

char Keys::kp[256] = { 0 };

int Keys::Key(int iKey)
{
	return (GetAsyncKeyState(iKey) >> 15) & 1;
}

int Keys::Onekey(int iKey)
{
	if (Key(iKey) && !kp[iKey]){ kp[iKey] = 1; return 1; }
	if (!Key(iKey))kp[iKey] = 0;
	return 0;
}

void COpenGLWinApp::ResetTimer()
{
	dwLastFrame = GetTickCount();
	fFrameInterval = 0.0f;
}

void COpenGLWinApp::UpdateTimer()
{
	DWORD dwCur = GetTickCount();
	fFrameInterval = float(dwCur - dwLastFrame)*0.001f;
	dwLastFrame = dwCur;
}

float COpenGLWinApp::sof(float fVal)
{
	return fVal*fFrameInterval;
}

bool COpenGLWinApp::InitializeApp(LPCWSTR a_sAppName)
{
	sAppName = a_sAppName;
	hMutex = CreateMutex(NULL, 1, sAppName);
	if (GetLastError() == ERROR_ALREADY_EXISTS)
	{
		MessageBox(NULL, (LPCWSTR)"This application already runs!", (LPCWSTR)"Multiple Instances Found.", MB_ICONINFORMATION | MB_OK);
		return 0;
	}
	return 1;
}

LRESULT CALLBACK GlobalMessageHandler(HWND hWnd, UINT uiMsg, WPARAM wParam, LPARAM lParam)
{
	return appMain.MsgHandlerMain(hWnd, uiMsg, wParam, lParam);
}

void COpenGLWinApp::RegisterAppClass(HINSTANCE a_hInstance)
{
	WNDCLASSEX wcex;
	memset(&wcex, 0, sizeof(WNDCLASSEX));
	wcex.cbSize = sizeof(WNDCLASSEX);
	wcex.style = CS_OWNDC;

	wcex.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH);

	wcex.hIcon = LoadIcon(hInstance, IDI_WINLOGO);
	wcex.hIconSm = LoadIcon(hInstance, IDI_WINLOGO);
	wcex.hCursor = LoadCursor(hInstance, IDC_ARROW);
	wcex.hInstance = hInstance;

	wcex.lpfnWndProc = GlobalMessageHandler;
	wcex.lpszClassName = sAppName;

	wcex.lpszMenuName = NULL;

	RegisterClassEx(&wcex);
}

bool COpenGLWinApp::CreateAppWindow(LPCWSTR sTitle)
{
	hWnd = CreateWindowEx(0, sAppName, sTitle, WS_OVERLAPPEDWINDOW | WS_CLIPCHILDREN,
		CW_USEDEFAULT, CW_USEDEFAULT, WIDTH, HEIGHT, NULL, NULL, hInstance, NULL);

	if (!oglControl.InitOpenGL(hInstance, &hWnd, 4, 2, InitScene, RenderScene, NULL, &oglControl))
	{
		return false;
	}

	ShowWindow(hWnd, SW_SHOW);

	// Just to send WM_SIZE message again
	//ShowWindow(hWnd, SW_SHOWMAXIMIZED);
	UpdateWindow(hWnd);
	
	return true;
}

void COpenGLWinApp::AppBody()
{
	MSG msg;
	while (1)
	{
		if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
		{
			if (msg.message == WM_QUIT)
			{
				break; // If the message was WM_QUIT then exit application
			}
			else
			{
				TranslateMessage(&msg); // Otherwise send message to appropriate window
				DispatchMessage(&msg);
			}
		}
		else if (bAppActive)
		{
			UpdateTimer();
			oglControl.Render(&oglControl);
		}
		else Sleep(200); // Do not consume processor power if application isn't active
	}
}

void COpenGLWinApp::Shutdown()
{
	oglControl.ReleaseOpenGLControl(&oglControl);

	DestroyWindow(hWnd);
	UnregisterClass(sAppName, hInstance);
	COpenGLControl::UnregisterSimpleOpenGLClass(hInstance);
	ReleaseMutex(hMutex);
}

LRESULT CALLBACK COpenGLWinApp::MsgHandlerMain(HWND hWnd, UINT uiMsg, WPARAM wParam, LPARAM lParam)
{
	PAINTSTRUCT ps;

	switch (uiMsg)
	{
	case WM_PAINT:
		BeginPaint(hWnd, &ps);
		EndPaint(hWnd, &ps);
		break;

	case WM_CLOSE:
		PostQuitMessage(0);
		break;

	case WM_ACTIVATE:
	{
		switch (LOWORD(wParam))
		{
		case WA_ACTIVE:
		case WA_CLICKACTIVE:
			bAppActive = true;
			break;
		case WA_INACTIVE:
			bAppActive = false;
			break;
		}
		break;
	}

	case WM_SIZE:
		oglControl.ResizeOpenGLViewportFull();
		SceneCamera.mProjection = glm::perspective(45.0f, float(LOWORD(lParam)) / float(HIWORD(lParam)), 0.01f, 1000.0f);
		break;

	default:
		return DefWindowProc(hWnd, uiMsg, wParam, lParam);
	}
	return 0;
}

int gameOptions(int ioptions)
	{
		std::cout << "Game Menu: \n 1. Start \n 2. Instructions \n 3. Credits \n 4. Quit" << std::endl;
		std::cin >> ioptions;
		return ioptions;
	}

HINSTANCE COpenGLWinApp::GetInstance()
{
	return hInstance;
}

#if _DEBUG
	int main(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR cmdLine, int cmdShow)
#else
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR lpCmdLine, int nCmdShow)
#endif
{
	bool bGameRun = true;

	int iOptions = 0;
	AllocConsole();
	HANDLE handle_out = GetStdHandle(STD_OUTPUT_HANDLE);
	int hCrt = _open_osfhandle((long)handle_out, _O_TEXT);
	FILE* hf_out = _fdopen(hCrt, "w");
	setvbuf(hf_out, NULL, _IONBF, 1);
	*stdout = *hf_out;

	HANDLE handle_in = GetStdHandle(STD_INPUT_HANDLE);
	hCrt = _open_osfhandle((long)handle_in, _O_TEXT);
	FILE* hf_in = _fdopen(hCrt, "r");
	setvbuf(hf_in, NULL, _IONBF, 128);
	*stdin = *hf_in;

	while (bGameRun == true)
	{
		//gameOptions(iOptions);
		switch (gameOptions(iOptions))
		{
		case 1:
			if (!appMain.InitializeApp(L"car_game"))
				return 0;
			appMain.RegisterAppClass(hInstance);

			if (!appMain.CreateAppWindow(L"Car Game"))
				return 0;
			appMain.ResetTimer();
			appMain.AppBody();
			appMain.Shutdown();
			break;

		case 2:
			break;

		case 3:
			break;

		case 4:
			ExitProcess(0);

			break;
		}
	}

	return EXIT_SUCCESS;

}